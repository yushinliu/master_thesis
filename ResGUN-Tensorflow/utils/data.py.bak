# -*- coding: utf-8 -*-
"""
Created on Tue Mar  6 09:50:15 2018

@author: sunkg
"""

import cv2
import random
import os
import numpy as np
import scipy
import scipy.misc

train_set = []
test_set = []
batch_index = 0

"""
Load set of images in a directory.
This will automatically allocate a 
random 20% of the images as a test set

data_dir: path to directory containing images -- nature image
"""

SEED = 1

def load_dataset(data_dir, img_size):

	global train_set
	global test_set
	imgs = []
	img_files = os.listdir(data_dir)
	for img in img_files:
		try:
			#print("good")
			tmp= cv2.imread(data_dir+"//"+img) #read each image
			x,y,z = tmp.shape
			coords_x = x / img_size
			coords_y = y/img_size
			coords = [ (q,r) for q in range(int(coords_x)) for r in range(int(coords_y)) ]
			for coord in coords:
				imgs.append(tmp[coord[0]*img_size:(coord[0]+1)*img_size,coord[1]*img_size:(coord[1]+1)*img_size,:])
		except:
			print ("oops")
	test_size = min(100,int( len(imgs)*0.2))
	print(test_size)
	random.seed(SEED)
	random.shuffle(imgs)
	test_set = imgs[:test_size]
	train_set = imgs[test_size:][:800]
	return train_set,test_set

"""
Get test set from the loaded dataset

size (optional): if this argument is chosen,
each element of the test set will be cropped
to the first (size x size) pixels in the image.

returns the test set of your data
"""
def get_test_set(shrunk_size):

	x = [change_image(scipy.misc.imresize(q,(shrunk_size,shrunk_size))) for q in test_set]
	y = [change_image(q) for q in test_set]

	return x,y

#change_image only for ct image
def change_image(imgtuple):
	img = imgtuple[:,:,np.newaxis]
	return img
	

"""
Get a batch of images from the training
set of images.

batch_size: size of the batch
original_size: size for target images
shrunk_size: size for shrunk images

returns x,y where:
	-x is the input set of shape [-1,shrunk_size,shrunk_size,channels]
	-y is the target set of shape [-1,original_size,original_size,channels]
"""
def get_batch(batch_size,shrunk_size):
	global batch_index

	target_img = []
	input_img = []
	#print(len(train_set))

	max_counter = len(train_set)/batch_size
	counter = batch_index % max_counter

	imgs = train_set[batch_size*int(counter):batch_size*(int(counter)+1)]
	x = [scipy.misc.imresize(q,(shrunk_size,shrunk_size)) for q in imgs]
	y = [q for q in imgs] 

	batch_index = (batch_index+1) % max_counter
	return x,y,batch_index  #x,y is the list of batch image

"""
Simple method to crop center of image

img: image to crop
cropx: width of crop
cropy: height of crop
returns cropped image
"""






